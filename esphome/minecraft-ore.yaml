esphome:
  name: minecraft-ore1
  friendly_name: minecraft-ore1
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "++yIsgIsGjs/gdIR/7L+FRvxkBiXZMMIbITQwOM0Qds="

ota:
  - platform: esphome
    password: "fedf205ec380d1344b829f65287f70ab"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ore Setup Hotspot"
    password: "password"

captive_portal:


# Store the custom HTML as a global variable
globals:
  - id: custom_html
    type: std::string
    initial_value: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Minecraft Ore Block Configuration</title>
          <style>
              body {
                  font-family: Arial, sans-serif;
                  max-width: 600px;
                  margin: 0 auto;
                  padding: 20px;
              }
              .form-group {
                  margin-bottom: 15px;
              }
              label {
                  display: block;
                  margin-bottom: 5px;
              }
              input[type="text"], input[type="number"], select {
                  width: 100%;
                  padding: 5px;
              }
              button {
                  background-color: #4CAF50;
                  color: white;
                  padding: 10px 15px;
                  border: none;
                  cursor: pointer;
                  margin-right: 10px;
              }
              button:hover {
                  background-color: #45a049;
              }
              #thresholdList {
                  list-style-type: none;
                  padding: 0;
              }
              #thresholdList li {
                  display: flex;
                  align-items: center;
                  margin-bottom: 10px;
              }
              #thresholdList input[type="number"] {
                  width: 60px;
                  margin-right: 10px;
              }
              #thresholdList input[type="color"] {
                  margin-right: 10px;
              }
              #staticColorSection {
                  display: none;
              }
          </style>
      </head>
      <body>
          <h1>Minecraft Ore Block Configuration</h1>
          <form id="configForm">
              <div class="form-group">
                  <label for="mode">Mode:</label>
                  <select id="mode" name="mode">
                      <option value="auto">Auto (Server-based)</option>
                      <option value="static">Static Color</option>
                  </select>
              </div>
              <div id="autoModeSection">
                  <div class="form-group">
                      <label for="serverAddress">Minecraft Server Address:</label>
                      <input type="text" id="serverAddress" name="serverAddress" required>
                  </div>
                  <div class="form-group">
                      <label for="serverPort">Minecraft Server Port:</label>
                      <input type="number" id="serverPort" name="serverPort" value="25565" required>
                  </div>
                  <div class="form-group">
                      <label>Player Count Thresholds:</label>
                      <ul id="thresholdList">
                          <!-- Thresholds will be added here by JavaScript -->
                      </ul>
                      <button type="button" id="addThreshold">+ Add Threshold</button>
                  </div>
              </div>
              <div id="staticColorSection" class="form-group">
                  <label for="staticColor">Static Color:</label>
                  <input type="color" id="staticColor" name="staticColor" value="#ff0000">
              </div>
              <button type="submit">Save Configuration</button>
          </form>

          <script>
              const modeSelect = document.getElementById('mode');
              const autoModeSection = document.getElementById('autoModeSection');
              const staticColorSection = document.getElementById('staticColorSection');
              const thresholdList = document.getElementById('thresholdList');
              const addThresholdButton = document.getElementById('addThreshold');

              modeSelect.addEventListener('change', function() {
                  if (this.value === 'auto') {
                      autoModeSection.style.display = 'block';
                      staticColorSection.style.display = 'none';
                  } else {
                      autoModeSection.style.display = 'none';
                      staticColorSection.style.display = 'block';
                  }
              });

              function addThreshold(players, color) {
                  const li = document.createElement('li');
                  li.innerHTML = `
                      <input type="number" name="thresholdPlayers[]" value="${players}" min="1" required>
                      <input type="color" name="thresholdColors[]" value="${color}">
                      <button type="button" class="removeThreshold">Remove</button>
                  `;
                  thresholdList.appendChild(li);

                  li.querySelector('.removeThreshold').addEventListener('click', function() {
                      thresholdList.removeChild(li);
                  });
              }

              addThresholdButton.addEventListener('click', function() {
                  addThreshold(1, '#ff0000');
              });

              // Add default entries
              addThreshold(1, '#ff0000');  // Red for 1+ players
              addThreshold(5, '#ffd700');  // Gold for 5+ players
              addThreshold(10, '#00ffff');  // Diamond blue for 10+ players

              document.getElementById('configForm').addEventListener('submit', function(e) {
                  e.preventDefault();
                  const formData = new FormData(this);
                  const data = {
                      mode: formData.get('mode'),
                      serverAddress: formData.get('serverAddress'),
                      serverPort: formData.get('serverPort'),
                      staticColor: formData.get('staticColor'),
                      thresholds: formData.getAll('thresholdPlayers[]').map((players, index) => ({
                          players: parseInt(players),
                          color: formData.getAll('thresholdColors[]')[index]
                      }))
                  };
                  
                  fetch('/api/config', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                  })
                  .then(response => response.json())
                  .then(data => {
                      alert('Configuration saved successfully!');
                  })
                  .catch((error) => {
                      console.error('Error:', error);
                      alert('Error saving configuration. Please try again.');
                  });
              });
          </script>
      </body>
      </html>

###############

# Web Server for configuration interface
web_server:
  port: 80
  local: true
  ota: false
  include_internal: false

# Custom components
external_components:
  - source: 
      url: https://github.com/plomdawg/esphome-minecraft.git
      type: git
      ref: dev
    refresh: 0s
    components: [minecraft_ore_block_config, minecraft_server_checker]

# Configuration component
minecraft_ore_block_config:
  id: ore_block_config

# Server checker component
minecraft_server_checker:
  id: server_checker
  config_id: ore_block_config
  player_count_id: player_count
  server_status_id: server_status
  update_interval: 15s

# LED control component
#minecraft_led_control:
#  id: led_control
#  config_id: ore_block_config
#  light_id: ore_block_led
#  player_count_sensor_id: player_count

# Sensors
sensor:
  - platform: template
    name: "Server Port"
    id: server_port
    icon: mdi:minecraft
  - platform: minecraft_server_checker
    name: "Player Count"
    id: player_count

text_sensor:
  - platform: template
    name: "Mode"
    id: mode
  - platform: template
    name: "Server Address"
    id: server_address
  - platform: template
    name: "Static Color"
    id: static_color
  - platform: minecraft_server_checker
    name: "Server Status"
    id: server_status

# LED Output
light:
  - platform: neopixelbus
    variant: WS2811
    type: GRB
    pin: D4
    num_leds: 1
    name: "Minecraft Ore Block LED"
    id: ore_block_led

# Button for manual control
binary_sensor:
  - platform: gpio
    pin: D3
    name: "Control Button"
    on_press:
      then:
        - light.toggle: ore_block_led
